data <- read.table(file = "C:\\Users\\Keguo\\Dropbox\\Research\\3RD PROJECT\\Callcenter\\october.txt", header = T)
data[1:10,]
dat1 <- data.frame(data[1:20,])
dat1$vru_exit <- as.POSIXct(dat1$vru_exit, format = '%H:%M:%S')
dat1$vru_entry <- as.POSIXct(dat1$vru_entry, format = '%H:%M:%S')
data_difference <- dat1$vru_exit - dat1$vru_entry
data_PS <- split(data, data$type )$PS
data_PS_notserved <- split(data_PS, data_PS$server)$NO_SERVER
data_PS_served <- data_PS[data_PS$ser_time != "0",]
mean_PS <- mean(data_PS_served$ser_time) #mean severice time of type PS
sd_PS <- sd(data_PS_served$ser_time)     #standard deviance of service time of type PS
SCV_PS <- sd_PS^2/mean_PS^2
barplot(table(data_PS_served$ser_time)/sum(table(data_PS_served$ser_time)), xlab = "servive time", ylab = "probability", main = "empirical density")
data_PS_served$logser_time <-log(data_PS_served[,16])
hist(data_PS_served[,18], breaks = 40, xlab = "log(servive time)", ylab = "probability", main = "empirical density")
std_service_data <- (data_PS_served[,18] - mean(data_PS_served[,18]))/sd(data_PS_served[,18]) ### standardized data
qqnorm(std_service_data) ## drawing the QQplot
abline(0,1) ## drawing a 45-degree reference line
### result is bad because of the calls with very short service time
### trancate the call data when service rate is smaller than 12
data_PS_served_adjust <- data_PS[data_PS$ser_time >= 12,]
data_PS_served_adjust$logser_time <-log(data_PS_served_adjust[,16])
###
hist(data_PS_served_adjust[,18],prob = T, breaks = 40,xlim = c(1,9), xlab = "adjust log(servive time)", ylab = "probability", main = "empirical density(trancated)")
## add normal density function to the histigram
x<-seq(0,10,0.01)
curve(dnorm(x, mean=mean(data_PS_served_adjust[,18]), sd=sd(data_PS_served_adjust[,18])), add=TRUE)
std_service_data_adjust <- (data_PS_served_adjust[,18] - mean(data_PS_served_adjust[,18]))/sd(data_PS_served_adjust[,18]) ### standardized data
qqnorm(std_service_data_adjust) ## drawing the QQ plot for the trancated data
abline(0,1) ## drawing a 45-degree reference line
dat1 <- data.frame(data[1:20,])
dat1$vru_exit
dat1$vru_entry
dat1
as.POSIXct(dat1$vru_exit, format = '%H:%M:%S')
dat1$vru_exit
paste(dat1$date, dat1$vru_entry)
dat1$vru_exit <- as.POSIXct(paste(dat1$date, dat1$vru_entry), format = '%Y%M%D %H:%M:%S')
as.POSIXct(paste(dat1$date, dat1$vru_entry), format = '%Y%M%D %H:%M:%S')
paste(dat1$date, dat1$vru_entry)
as.POSIXct(paste(dat1$date, dat1$vru_entry))
as.POSIXct(paste(dat1$date, dat1$vru_entry), format = '%y%m%d %H:%M:%S')
as.POSIXct(paste(dat1$date, dat1$vru_exit), format = '%y%m%d %H:%M:%S')
paste(dat1$date, dat1$vru_exit)
dat1 <- data.frame(data[1:20,])
dat1$vru_entry_time <- as.POSIXct(paste(dat1$date, dat1$vru_entry), format = '%y%m%d %H:%M:%S')
dat1$vru_exit_time <- as.POSIXct(paste(dat1$date, dat1$vru_exit), format = '%y%m%d %H:%M:%S')
dat1$vru_exit_time
str(dat1$vru_exit_time)
dat1$vru_exit_time$Date
dat1 <- data.frame(data[1:20,])
dat1$vru_entry_time <- strptime(paste(dat1$date, dat1$vru_entry), format = '%y%m%d %H:%M:%S')
dat1$vru_entry_time
?unclass
unclass(dat1$vru_entry_time)
dat1$vru_entry_time <- strptime(paste(dat1$date, dat1$vru_entry),
format = '%y%m%d %H:%M:%S', tz="")
dat1$vru_entry_time
z <- strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
z # prints without fractional seconds
op <- options(digits.secs = 3)
z
options(op)
data_difference <- dat1$vru_exit_time - dat1$vru_entry_time
## locale-specific version of date()
format(Sys.time(), "%a %b %d %X %Y %Z")
## time to sub-second accuracy (if supported by the OS)
format(Sys.time(), "%H:%M:%OS3")
## read in date info in format 'ddmmmyyyy'
## This will give NA(s) in some locales; setting the C locale
## as in the commented lines will overcome this on most systems.
## lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- strptime(x, "%d%b%Y")
## Sys.setlocale("LC_TIME", lct)
z
## read in date/time info in format 'm/d/y h:m:s'
dates <- c("02/27/92", "02/27/92", "01/14/92", "02/28/92", "02/01/92")
times <- c("23:03:20", "22:29:56", "01:03:30", "18:21:03", "16:56:26")
x <- paste(dates, times)
strptime(x, "%m/%d/%y %H:%M:%S")
## time with fractional seconds
z <- strptime("20/2/06 11:16:16.683", "%d/%m/%y %H:%M:%OS")
z # prints without fractional seconds
op <- options(digits.secs = 3)
z
options(op)
## time zones name are not portable, but 'EST5EDT' comes pretty close.
(x <- strptime(c("2006-01-08 10:07:52", "2006-08-07 19:33:02"),
"%Y-%m-%d %H:%M:%S", tz = "EST5EDT"))
attr(x, "tzone")
## An RFC 822 header (Eastern Canada, during DST)
strptime("Tue, 23 Mar 2010 14:36:38 -0400",  "%a, %d %b %Y %H:%M:%S %z")
## Make sure you know what the abbreviated names are for you if you wish
## to use them for input (they are matched case-insensitively):
format(seq.Date(as.Date('1978-01-01'), by = 'day', len = 7), "%a")
format(seq.Date(as.Date('2000-01-01'), by = 'month', len = 12), "%b")
entry <- as.POSIXct(paste(dat1$date, dat1$vru_entry), format = '%y%m%d %H:%M:%S')
str(entry)
class(entry)
unclass(entry)
str(unclass(entry))
as.vector(unclass(entry))
as.vector(entry)
dat1$vru_exit_sec <- as.vector(exit)
exit <- as.POSIXct(paste(dat1$date, dat1$vru_exit), format='%y%m%d %H:%M:%S')
dat1$vru_exit_sec <- as.vector(exit)
View(dat1)
entry <- strptime(paste(dat1$date, dat1$vru_entry), format='%y%m%d %H:%M:%S')
dat1$vru_entry_sec <- as.vector(entry)
dat1$vru_entry_sec
dat1 <- data.frame(data[1:20,])
entry <- as.POSIXct(paste(dat1$date, dat1$vru_entry), format='%y%m%d %H:%M:%S')
dat1$vru_entry_sec <- as.vector(entry)
exit <- as.POSIXct(paste(dat1$date, dat1$vru_exit), format='%y%m%d %H:%M:%S')
dat1$vru_exit_sec <- as.vector(exit)
data_difference <- dat1$vru_exit_time - dat1$vru_entry_time
data_difference
data_difference <- dat1$vru_exit_sec - dat1$vru_entry_sec
data_difference
data <- read.table(file = "C:\\Users\\Keguo\\Dropbox\\Research\\3RD PROJECT\\Callcenter\\october.txt", header = T)
exit <- as.POSIXct(paste(data$date, data$vru_exit), format='%y%m%d %H:%M:%S')
data$vru_exit_sec <- as.vector(exit)
head(data$vru_exit_sec)
hist(data$vru_exit_sec)
d= density(data$vru_exit_sec)
plot(d)
as.POSIXct(paste(dat1$date, dat1$vru_exit), format='%y%m%d %H:%M:%S')
as.POSIXct("1999-01-01 00:00:00")
as.POSIXct("1999-01-01 00:00:00", tz="CDT")
as.POSIXct("1999-01-01 00:00:00", tz=CDT)
as.POSIXct("1999-01-01 00:00:00", tz="")
as.POSIXct("1999-01-01 00:00:01", tz="")
as.POSIXct("990101 00:00:01", format='%y%m%d %H:%M:%S')
entry <- as.POSIXct(paste(dat1$date, dat1$vru_entry), format='%y%m%d %H:%M:%S')
as.POSIXct(paste(dat1$date, dat1$vru_entry), format='%y%m%d %H:%M:%S')
as.POSIXct("990101 00:00:01", format='%y%m%d %H:%M:%S')
as.POSIXct("990101 00:24:58", format='%y%m%d %H:%M:%S')
as.vector(as.POSIXct("990101 00:24:58", format='%y%m%d %H:%M:%S'))
as.vector(entry)
as.vector(as.POSIXct("991001 00:24:58", format='%y%m%d %H:%M:%S'))
as.vector(as.POSIXct("991001 00:00:01", format='%y%m%d %H:%M:%S'))
as.vector(as.POSIXct("991001 00:00:00", format='%y%m%d %H:%M:%S'))
as.vector(as.POSIXct("990101 00:00:00", format='%y%m%d %H:%M:%S'))
as.numeric(as.POSIXct("990101 00:00:00", format='%y%m%d %H:%M:%S'))
5%/%6
4%/%6
7%/%6
a = data$vru_exit_sec-Oct1
d= density(a[data$date])
plot(d)
Oct1 <- as.numeric(as.POSIXct("990101 00:00:00", format='%y%m%d %H:%M:%S'))
a = data$vru_exit_sec-Oct1
d= density(a[data$date])
plot(d)
d= density(a[data$date=1])
d= density(a[data$date==1])
plot(d)
head(a)
Oct1 <- as.numeric(as.POSIXct("991001 00:00:00", format='%y%m%d %H:%M:%S'))
a = data$vru_exit_sec-Oct1
head(a)
d= density(a)
plot(d)
a %% 60*60
d= density(a)
plot(d)
d= density(a %% 60*60)
plot(d)
d= density(a %% (60*60))
plot(d)
max(a)
60*60*31
d= density(a %% (60*60*24))
plot(d)
d= density((a %% (60*60*24))/60/60)
plot(d)
plot(d, xlim=6:24)
plot(d, xlim=c(6,24))
plot(d, xlim=c(6,24), prob = F)
plot(d, xlim=c(6,24), title = "density")
warnings
warnings()
?plot
plot(d, xlim=c(6,24), main = "Average calls per hour")
plot(density(data$vru_exit_sec))
