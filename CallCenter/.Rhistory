for(i in 1:nrow(dat)){
if(dat$q_time[i] > 0){
dat$arrival_sec_of_day[i] <- q_start_sec_of_day[i]
} else{dat$arrival_sec_of_day[i] <- ser_start_sec_of_day[i]}
}
### get the arrival time and service time for Nov/Dec ###
dat1 <- read.table(file = "C:/Users/Keguo/Dropbox/GitHub/queue-systems/CallCenter/november.txt", header = T)
q_start1 <- strptime(paste(dat1$date, dat1$q_start), format='%y%m%d %H:%M:%S')
dat1$arrival_day_of_month <- as.numeric(format(q_start1, '%d'))
dat1$arrival_day_of_week <- (dat1$arrival_day_of_month) %% 7
dat1$month <- 11
dat2 <- read.table(file = "C:/Users/Keguo/Dropbox/GitHub/queue-systems/CallCenter/december.txt", header = T)
q_start2 <- strptime(paste(dat2$date, dat2$q_start), format='%y%m%d %H:%M:%S')
dat2$arrival_day_of_month <- as.numeric(format(q_start2, '%d'))
dat2$arrival_day_of_week <- (dat2$arrival_day_of_month + 2) %% 7
dat2$month <- 12
dat <- rbind(dat1, dat2)
## we only need "PS" type service and q_start greater than 0 with service time greater than 0 ##
## "PS" type
dat <- split(dat, dat$type )$PS
dat <- dat[dat$ser_time > 0 | dat$q_time > 0,]
q_start <- strptime(paste(dat$date, dat$q_start), format='%y%m%d %H:%M:%S')
q_start_hour_of_day <- as.numeric(format(q_start, '%H'))
q_start_min_of_hour <- as.numeric(format(q_start, '%M'))
q_start_sec_of_min <- as.numeric(format(q_start, '%S'))
q_start_sec_of_day <- (q_start_hour_of_day*3600
+ q_start_min_of_hour*60
+ q_start_sec_of_min)
ser_start <- strptime(paste(dat$date, dat$ser_start), format='%y%m%d %H:%M:%S')
ser_start_hour_of_day <- as.numeric(format(ser_start, '%H'))
ser_start_min_of_hour <- as.numeric(format(ser_start, '%M'))
ser_start_sec_of_min <- as.numeric(format(ser_start, '%S'))
ser_start_sec_of_day <- (ser_start_hour_of_day*3600
+ ser_start_min_of_hour*60
+ ser_start_sec_of_min)
# valid dat (positive service time or queue time)
dat$arrival_sec_of_day = -1
for(i in 1:nrow(dat)){
if(dat$q_time[i] > 0){
dat$arrival_sec_of_day[i] <- q_start_sec_of_day[i]
} else{dat$arrival_sec_of_day[i] <- ser_start_sec_of_day[i]}
}
dat$arrival_min_of_hour = dat$arrival_sec_of_day%/%60%%60
dat$arrival_hour_of_day = dat$arrival_sec_of_day%/%(60*60)
# delete some data after midnight and before 7 am
dat <- dat[dat$arrival_sec_of_day >= 7*60*60, ]
write.csv(dat, file='Nov_Dec_data.csv')
dat <- read.csv('C:/Users/Keguo/Dropbox/GitHub/queue-systems/CallCenter/staffing/Nov_Dec_data.csv', header = T)
attach(dat)
detach(dat)
detach(dat)
detach(dat)
attach(dat)
workdat <- dat[arrival_day_of_week<5, ]
detach(dat)
attach(workdat)
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
mfrow=c(1,1)
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
par(mfrow=c(1,1), oma=c(1,0,0,0))
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
X = aggregate(arrival_day_of_month, by=list(paste(month,arrival_day_of_month), arrival_day_of_week,arrival_hour_of_day), length)
colnames(X) <- c('day', 'weekday', 'hour', 'arrivals')
X$hour <- X$hour+.5
X$hour2 <- (X$hour)^2
X$hour3 <- (X$hour)^3
X$hour4 <- (X$hour)^4
X$hour5 <- (X$hour)^5
X <- X[order(X$day), ]
## polynomials ##
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'polynomial for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o1 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday), data = X)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
o3 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday), data = X)
b3 <- o3$coefficients
x <- seq(7,24,by=.01)
y <- b3[2] + b3[7]*x + b3[12]*x^2 + b3[17]*x^3
lines(x,y,col=4,lwd=2)
o4 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday) + hour4:factor(weekday), data = X)
b4 <- o4$coefficients
x <- seq(7,24,by=.01)
y <- b4[2] + b4[7]*x + b4[12]*x^2 + b4[17]*x^3 + b4[22]*x^4
lines(x,y,col=5,lwd=2)
o5 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday) + hour3:factor(weekday)
+ hour4:factor(weekday) + hour5:factor(weekday), data = X)
b5 <- o5$coefficients
x <- seq(7,24,by=.01)
y <- b5[2] + b5[7]*x + b5[12]*x^2 + b5[17]*x^3 + b5[22]*x^4 + b5[27]*x^5
lines(x,y,col=6,lwd=2)
legend('topright',as.character(1:5), title = 'order', col = 2:6, lwd=2)
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'two-normal for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'two-normal for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o <- nls(arrivals ~ 1/sqrt(2*pi)/sig1*exp(-(hour-mu1)^2/sig1^2)
+ 1/sqrt(2*pi)/sig2*exp(-(hour-mu2)^2/sig2^2), data = X1,
start=list(mu1=10, sig1=1, mu2=15, sig2=2),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE))
o <- nls(arrivals ~ 1/sqrt(2*pi)/sig1*exp(-(hour-mu1)^2/sig1^2)
+ 1/sqrt(2*pi)/sig2*exp(-(hour-mu2)^2/sig2^2), data = X1,
start=list(mu1=10, sig1=1, mu2=15, sig2=2),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE)
o <- nls(arrivals ~ sig1*exp(-(hour-mu1)^2/sig1^2)
+ sig2*exp(-(hour-mu2)^2/sig2^2), data = X1,
start=list(mu1=10, sig1=1/sqrt(2*pi), mu2=15, sig2=2/sqrt(2*pi)),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE)
# Here P is the same as dnorm (probability density function for normal
# distribution), but other functions could be tried here.
P <- function(x, mean, sd)
{
variance <- sd^2
exp(-(x-mean)^2/(2*variance)) / sqrt(2*pi*variance)
}
# integrate(P, -1, 1, mean=0, sd=1) is same as integrate(dnorm, -1, 1, mean=0, sd=1)
# integrate(P,-5,5, mean=0, sd=1)   # should be close to 1.0
# Find "peaks" in array.
# R equivalent of Splus peaks() function
# http://finzi.psych.upenn.edu/R/Rhelp02a/archive/33097.html
# (see efg's posting to R-Help on 8 Feb 2007 about problem with ties.)
#
#peaks(c(1,4,4,1,6,1,5,1,1),3)
#[1] FALSE FALSE  TRUE FALSE  TRUE FALSE  TRUE
peaks <- function(series,span=3)
{
z <- embed(series, span)
s <- span%/%2
v <- max.col(z, "first") == 1 + s   # take first if a tie
result <- c(rep(FALSE,s),v)
result <- result[1:(length(result)-s)]
result
}
# First derivative.  Adjust x values to be center of interval.
# Spacing of x-points need not be uniform
Deriv1 <- function(x,y)
{
y.prime <- diff(y) / diff(x)
x.prime <- x[-length(x)] + diff(x)/2
list(x = x.prime,
y = y.prime)
}
# "Centered" 2nd-derivative. Spacing of x-points assumed to be uniform.
Deriv2 <- function(x,y)
{
h <- x[2] - x[1]
Range <- 2:(length(x)-1)  # Drop first and last points
list(x = x[Range],
y = (y[Range+1] - 2*y[Range] + y[Range-1]) / h^2)
}
Delta <- 0.01
x <- seq(0.0,10.0, by=Delta)
y1 <- P(x, 3.75, 0.75)
y2 <- P(x, 6.00, 0.50)
y <- y1 + y2
# Approximate area under curve
#0.01*sum(y1)
#0.01*sum(y2)
#0.01*sum(y)
#integrate(P,0,10, mean=3.75, sd=0.75)
#integrate(P,0,10, mean=6.00, sd=0.50)
par(mfrow=c(3,1), oma=c(1,0,0,0))
##### Gaussians
plot(x,y, type="l", lwd=3,
main="Sum of Two Gaussians",
xlab="x", ylab="y")
abline(h=0, v=c(3.75,6.00), lty="dotted")
lines(x,y1, col="red")
lines(x,y2, col="blue")
##### 1st Derivative
# According to Abramowitz & Stegun, inflection points are at +/- sigma.
derivative1 <- Deriv1(x,y)
plot(derivative1$x,derivative1$y, type="l",
main="1st Derivative", xlab="x", ylab="y'")
abline(h=0, v=0, lty="dotted")
peaks.Deriv1   <- peaks( derivative1$y, span=3)
valleys.Deriv1 <- peaks(-derivative1$y, span=3)
points( derivative1$x[peaks.Deriv1], derivative1$y[peaks.Deriv1],
pch=19, col="red")
points( derivative1$x[valleys.Deriv1], derivative1$y[valleys.Deriv1],
pch=19, col="blue")
# Approximate location of peak and valley
derivative1$x[peaks.Deriv1]
derivative1$x[valleys.Deriv1]
s.approx <- (derivative1$x[valleys.Deriv1] - derivative1$x[peaks.Deriv1])/2
s.approx
#### 2nd Derivative
derivative2 <- Deriv2(x,y)
plot(derivative2$x,derivative2$y, type="l",
main="2nd Derivative", xlab="x", ylab="y''")
abline(h=0, v=0, lty="dotted")
peaks.Deriv2   <- peaks( derivative2$y, span=3)
valleys.Deriv2 <- peaks(-derivative2$y, span=3)
points( derivative2$x[peaks.Deriv2], derivative2$y[peaks.Deriv2],
pch=19, col="red")
points( derivative2$x[valleys.Deriv2], derivative2$y[valleys.Deriv2],
pch=19, col="blue")
# Approximate location of mean of normal distribution:
derivative2$x[valleys.Deriv2]
derivative2$y[valleys.Deriv2]
mu.approx <-  derivative2$x[valleys.Deriv2]
mu.approx
# Peaks
derivative2$x[peaks.Deriv2]
derivative2$y[peaks.Deriv2]
# Only keep the first four the correpsond to four s.approx values
mu.approx <- mu.approx[1:4]
mtext("U:/efg/lab/R/MixturesOfDistributions/TwoGaussians.R",
BOTTOM<-1, cex=0.8, adj=0.0, outer=TRUE)
# Fit distribution
# STUPID package:  cannot solve "exact case" without error.
# MUST have noise in data.
fit1 <- nls(y~(a/b)*exp(-(x-c)^2/(2*b^2))+(d/e)*exp(-(x-f)^2/(2*e^2)),
start=list(a=(1/sqrt(2*pi)) / s.approx[1], b=s.approx[1], c=mu.approx[1],
d=(1/sqrt(2*pi)) / s.approx[2], e=s.approx[2], f=mu.approx[2]),
trace=TRUE)
set.seed(17)
y <- y + rnorm(length(y), 1E-5, 1E-4)
fit2 <- nls(y~(a/b)*exp(-(x-c)^2/(2*b^2))+(d/e)*exp(-(x-f)^2/(2*e^2)),
start=list(a=(1/sqrt(2*pi)) / s.approx[1], b=s.approx[1], c=mu.approx[1],
d=(1/sqrt(2*pi)) / s.approx[2], e=s.approx[2], f=mu.approx[2]),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE)
fit2
o <- nls(arrivals ~ sig1*exp(-(hour-mu1)^2/sig1^2)
+ sig2*exp(-(hour-mu2)^2/sig2^2), data = X1,
start=list(mu1=10, sig1=1/sqrt(2*pi), mu2=15, sig2=2/sqrt(2*pi)),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE)
dat <- read.csv('C:/Users/Keguo/Dropbox/GitHub/queue-systems/CallCenter/staffing/Nov_Dec_data.csv', header = T)
workdat <- dat[dat$arrival_day_of_week<5, ]
attach(workdat)
detach(workdat)
#### mixed normal ####
X1 <- X[X$weekday==1,]
head(X1)
plot(0, xlim = c(7,24), ylim = c(min(X1$arrivals), max(X1$arrivals)),
main = 'two-normal for arrival rate function (MONDAYS)',
xlab = "Hours", ylab = '# of Arrivals')
for(i in 1:(nrow(X1)/17)){
lines(X1$hour[(i*17-16):(i*17)], X1$arrivals[(i*17-16):(i*17)])
}
o <- nls(arrivals ~ sig1*exp(-(hour-mu1)^2/sig1^2)
+ sig2*exp(-(hour-mu2)^2/sig2^2), data = X1,
start=list(mu1=10, sig1=1/sqrt(2*pi), mu2=15, sig2=2/sqrt(2*pi)),
control=nls.control(tol=1E-5, minFactor=1/1024),
trace=TRUE)
b1 <- o1$coefficients
abline(b1[2], b1[7], col=2,lwd=2)
o2 <- lm(arrivals ~ 0 + factor(weekday) + hour:factor(weekday)
+ hour2:factor(weekday), data = X)
b2 <- o2$coefficients
x <- seq(7,24,by=.01)
y <- b2[2] + b2[7]*x + b2[12]*x^2
lines(x,y,col=3,lwd=2)
